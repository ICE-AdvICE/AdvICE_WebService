name: Deploy Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Clean Gradle Build (Skip Tests)
        working-directory: backend
        run: |
          chmod +x ./gradlew
          ./gradlew clean --no-daemon
          ./gradlew build -x test -x compileTestJava --no-daemon

      - name: Docker build & push
        working-directory: backend
        run: |
          echo "${{ secrets.BE_DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.BE_DOCKER_USERNAME }}" --password-stdin
          docker build --no-cache -t ${{ secrets.BE_DOCKER_USERNAME }}/advicecodingzone:latest .
          docker push ${{ secrets.BE_DOCKER_USERNAME }}/advicecodingzone:latest

      - name: Get GitHub Actions Runner IP
        run: |
          RUNNER_IP=$(curl -s ifconfig.me)
          if [[ -z "$RUNNER_IP" ]]; then
            echo "Error: Unable to retrieve GitHub Actions Runner IP."
            exit 1
          fi
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          echo "GitHub Actions Runner IP: $RUNNER_IP"

      - name: Add SSH IP to EC2 Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.BE_SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.BE_AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BE_AWS_SECRET_ACCESS_KEY }}

      - name: Create .env file
        run: |
          cat <<EOF > .env
          ${{ secrets.BE_ENV_FILE }}
          EOF

      - name: Debug .env file
        run: |
          echo "=== .env 파일 내용 ==="
          cat .env

      - name: Copy .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BE_HOST }}
          username: ubuntu
          key: "${{ secrets.BE_KEY }}"
          source: ".env"
          target: "/home/ubuntu/"

      - name: Verify .env file exists on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BE_HOST }}
          username: ubuntu
          key: "${{ secrets.BE_KEY }}"
          script: |
            if [ ! -f /home/ubuntu/.env ]; then
              echo "Error: .env file is missing!"
              exit 1
            fi
            echo ".env file successfully copied to EC2."

      - name: Stop and Remove Existing Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BE_HOST }}
          username: ubuntu
          key: "${{ secrets.BE_KEY }}"
          script: |
            CONTAINER_NAME="backend"

            if [ "$(sudo docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping and removing existing container: $CONTAINER_NAME"
              sudo docker stop $CONTAINER_NAME || true
              sudo docker rm $CONTAINER_NAME
            else
              echo "No existing container found. Skipping removal."
            fi

            sudo docker container prune -f

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BE_HOST }}
          username: ubuntu
          key: "${{ secrets.BE_KEY }}"
          script: |
            CONTAINER_NAME="backend"
            IMAGE_NAME="${{ secrets.BE_DOCKER_USERNAME }}/advicecodingzone:latest"

            mkdir -p /home/ubuntu/backend/

            if [ -f /home/ubuntu/.env ]; then
              mv /home/ubuntu/.env /home/ubuntu/backend/.env
            else
              echo "Error: .env file is missing!"
              exit 1
            fi

            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            fi

            sudo docker pull $IMAGE_NAME

            sudo docker run -d --name $CONTAINER_NAME \
              -p 8080:8080 --restart always \
              --env-file /home/ubuntu/backend/.env \
              -e TZ=Asia/Seoul \
              -v /home/ubuntu/backend/.env:/app/.env \
              $IMAGE_NAME

      - name: Clean Up Unused Docker Images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BE_HOST }}
          username: ubuntu
          key: "${{ secrets.BE_KEY }}"
          script: |
            echo "Cleaning up unused Docker images..."
            sudo docker rmi $(docker images -f "dangling=true" -q) || true
            sudo docker image prune -af --filter "until=24h"

      - name: Remove SSH IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.BE_SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
            --region ${{ secrets.BE_AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BE_AWS_SECRET_ACCESS_KEY }}