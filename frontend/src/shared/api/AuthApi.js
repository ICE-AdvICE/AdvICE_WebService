import axios from 'axios';

//const DOMAIN = 'http://localhost:8080';
const DOMAIN = 'https://api.ice-advice.co.kr'; 
const API_DOMAIN = `${DOMAIN}/api/v1`;
const GET_MYPAGE_USER_URL = () => `${API_DOMAIN}/user`; // ÎßàÏù¥ÌéòÏù¥ÏßÄ_Í∞úÏù∏Ï†ïÎ≥¥
const GET_SIGN_IN_USER_URL = () => `${API_DOMAIN}/user`;
const GET_CZ_AUTH_TYPE = () => `${API_DOMAIN}/coding-zone/auth-type`;
const REFRESH_TOKEN_URL = () => `${API_DOMAIN}/auth/refresh`;

const authorization = (accessToken) => ({
    headers: { Authorization: `Bearer ${accessToken}` }
});

export const getSignInUserRequest  = async (accessToken, setCookie, navigate) => {
    try {
        const response = await axios.get(GET_SIGN_IN_USER_URL(), authorization(accessToken));
        return response.data;
    } catch (error) {
        if (!error.response) {
            return;
        }
        const { code } = error.response.data;
        switch (code) {
            case "NA":

                break;
            case "ATE": // üîÑ Access Token ÎßåÎ£å Ï≤òÎ¶¨
                console.warn("üîÑ Access Token ÎßåÎ£åÎê®. ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â ÏãúÎèÑ Ï§ë...");
                const newToken = await refreshTokenRequest(setCookie, accessToken, navigate);
                if (newToken?.accessToken) {
                    alert("üîë ÌÜ†ÌÅ∞Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïû¨Î∞úÍ∏âÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï©ÎãàÎã§.(ÌäπÏ†ïÍ∏Ä)");
                    return getSignInUserRequest( newToken.accessToken, setCookie,navigate);
                } else {
                    alert("‚ùå ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â Ïã§Ìå®. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
                    setCookie('accessToken', '', { path: '/', expires: new Date(0) });
                    navigate('/');
                    return null;
                }
            case "DBE":
                console.log("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§");
                break;
            default:
                console.log("ÏòàÏÉÅÏπò Î™ªÌïú Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÏòÄÏäµÎãàÎã§.");
                break;
        }
    }
};

export const getMypageRequest = async (accessToken, setCookie, navigate) => {
    try {
        const response = await axios.get(GET_MYPAGE_USER_URL(), authorization(accessToken));
        return response.data;
    } catch (error) {
        if (!error.response) {
            return;
        }
        const { code } = error.response.data;
        switch (code) {
            case "NA":
                break;
            case "ATE": // üîÑ Access Token ÎßåÎ£å Ï≤òÎ¶¨
                console.warn("üîÑ Access Token ÎßåÎ£åÎê®. ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â ÏãúÎèÑ Ï§ë...");
                const newToken = await refreshTokenRequest(setCookie, accessToken, navigate);
                if (newToken?.accessToken) {
                    return getMypageRequest (newToken.accessToken, setCookie,navigate);
                } else {
                    alert("‚ùå ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â Ïã§Ìå®. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.(ÎßàÏù¥ÌéòÏù¥ÏßÄ)");
                    setCookie('accessToken', '', { path: '/', expires: new Date(0) });
                    navigate('/');
                    return null;
                }
            case "DBE":
                console.log("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§");
                break;
            default:
                console.log("ÏòàÏÉÅÏπò Î™ªÌïú Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÏòÄÏäµÎãàÎã§.");
                break;
        }
    }
};
export const getczauthtypetRequest = async (accessToken, setCookie, navigate) => {
    try {
        const response = await axios.get(GET_CZ_AUTH_TYPE(), authorization(accessToken));
        return response.data;
    } catch (error) {
        if (!error.response) {
            return;
        }
        const { code } = error.response.data;
        switch (code) {
            case "NA":
                alert("Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤åÏãúÍ∏ÄÏûÖÎãàÎã§.");
                navigate(`/article-main`);
                break;
            case "ATE": // üîÑ Access Token ÎßåÎ£å Ï≤òÎ¶¨
                console.warn("üîÑ Access Token ÎßåÎ£åÎê®. ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â ÏãúÎèÑ Ï§ë...");
                const newToken = await refreshTokenRequest(setCookie, accessToken, navigate);
                if (newToken?.accessToken) {
                    return getczauthtypetRequest(newToken.accessToken, setCookie, navigate);
                } else {
                    alert("‚ùå ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â Ïã§Ìå®. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.(ÏΩîÎî©Ï°¥ Í∂åÌïú)");
                    setCookie('accessToken', '', { path: '/', expires: new Date(0) });
                    navigate('/');
                    return null;
                }
            case "DBE":
                console.log("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§");
                break;
            default:
                console.log("ÏòàÏÉÅÏπò Î™ªÌïú Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÏòÄÏäµÎãàÎã§.");
                break;
        }
    }
};





export const refreshTokenRequest = async (setCookie, accessToken, navigate, apiName) => {
    try {
        if (!accessToken) {
            navigate('/');
            return null;
        }

        const response = await axios.post(
            REFRESH_TOKEN_URL(),
            {},
            {
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${accessToken}`
                },
                withCredentials: true
            }
        );

        if (response.data.code === "SU") {
            const newAccessToken = response.data.accessToken;
            const newRefreshToken = response.headers['refresh-token'];

            setCookie('accessToken', newAccessToken, { path: '/', expires: new Date(Date.now() + 3600 * 1000) });
            if (newRefreshToken) {
                setCookie('refreshToken', newRefreshToken, { path: '/', httpOnly: true, secure: true });
            }

            console.log(`‚úÖ [${apiName}] ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â ÏÑ±Í≥µ:`, newAccessToken);
            return { accessToken: newAccessToken, apiName };
        } else {
            alert(`[${apiName}] [ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â Ïã§Ìå®] ÏùëÎãµ:`, response.data.message);
            navigate('/');
            return null;
        }
    } catch (error) {
        navigate('/');
        return null;
    }
};

